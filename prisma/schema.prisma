generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  id String @id @default(cuid())

  firstname String
  lastname  String
  birthdate DateTime
  gender    String
  country   String
  browser   Json     @default("{}")
  metadata  Json     @default("{}")

  emails   Email[]
  accounts Account[]
  wallets  Wallet[]
  airdrops Airdrop[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WalletType {
  EVM
}

model Wallet {
  id String @id @default(cuid())

  type       WalletType
  publicKey  String
  privateKey String
  mnemonic   String
  password   String
  metadata   Json       @default("{}")
  usedBy     String[]   @default([])

  entities Entity[]
  airdrops Airdrop[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, publicKey])
}

enum EmailStatus {
  UNKNOWN
  PENDING
  VERIFIED
  BLOCKED
}

enum EmailPlatform {
  TUTANOTA
  PROTONMAIL
  GMAIL
}

model Email {
  id String @id @default(cuid())

  platform EmailPlatform
  username String
  password String
  status   EmailStatus   @default(UNKNOWN)
  metadata Json          @default("{}")
  usedBy   String[]      @default([])

  parentId    String?
  parentEmail Email?  @relation("EmailToEmail", fields: [parentId], references: [id])
  childEmails Email[] @relation("EmailToEmail")

  entityId String
  entity   Entity @relation(fields: [entityId], references: [id])

  accounts Account[]
  airdrops Airdrop[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, status, entityId])
}

enum AccountStatus {
  UNKNOWN
  PENDING
  VERIFIED
  BLOCKED
}

enum AccountPlatform {
  TWITTER
}

model Account {
  id String @id @default(cuid())

  platform AccountPlatform
  username String          @default("")
  password String
  status   AccountStatus   @default(UNKNOWN)
  metadata Json            @default("{}")
  usedBy   String[]        @default([])

  entityId String
  entity   Entity @relation(fields: [entityId], references: [id])

  emailId String
  email   Email  @relation(fields: [emailId], references: [id])

  airdropId String?
  airdrop   Airdrop? @relation(fields: [airdropId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, status, entityId, airdropId])
}

enum AirdropStatus {
  UNKNOWN
  PENDING
  VERIFIED
  BLOCKED
}

model Airdrop {
  id       String        @id @default(cuid())
  name     String
  status   AccountStatus @default(UNKNOWN)
  metadata Json          @default("{}")

  entityId String
  entity   Entity @relation(fields: [entityId], references: [id])

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id])

  emailId String?
  email   Email?  @relation(fields: [emailId], references: [id])

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, status, entityId])
}
